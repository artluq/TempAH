import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { ApiService } from '../service/api.service';
import { User } from '../model/user.model';  // Make sure you import User interface
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-signup',
  templateUrl: './signup.component.html',
  styleUrls: ['./signup.component.css']
})
export class SignupComponent {
  username: string = '';
  password: string = '';
  email: string = '';
  fullName: string = '';
  phoneNumber: string = '';
  errorMessage: string = '';
  successMessage: string = '';

  constructor(private router: Router, private authService: ApiService) {}

  onSignup() {
    // Hash the password (optional, but recommended for security)
    const hashedPassword = this.hashPassword(this.password);

    const signupData: User = {
      userId: 0, // Assuming this is auto-generated by the backend
      username: this.username,
      passwordHash: hashedPassword,  // Sending the hashed password
      email: this.email,
      fullName: this.fullName,
      phoneNumber: this.phoneNumber,
      createdAt: new Date(),  // Set current date and time
      isActive: true,  // Using boolean instead of 1/0 for better readability
      roleId: 3,  // Assuming 3 is the default user role
      role: 'User'  // Assuming a string role name can be sent
    };

    this.authService.signup(signupData).subscribe({
      next: () => {
        this.successMessage = 'Sign up successful! Redirecting to login page...';
        setTimeout(() => this.router.navigate(['/login']), 3000);  // Redirect after 3 seconds
      },
      error: () => {
        this.errorMessage = 'Sign up failed. Please try again.';
      }
    });
  }

  // Optional method to hash password
  private hashPassword(password: string): string {
    // You can use a library like crypto-js to hash passwords (for security)
    // Example: const hashed = CryptoJS.SHA256(password).toString(CryptoJS.enc.Base64);
    // Replace with your actual hash logic
    return password;  // Return as is for now, replace with real hashing
  }
}
